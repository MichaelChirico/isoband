[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018 Claus O. Wilke Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/isoband1.html","id":"performance","dir":"Articles","previous_headings":"","what":"Performance","title":"Generating isolines and isobands","text":"code written C++ performance generally good. Isolining fast grDevices::contourLines(), isobanding approximately 2.5 times slower.","code":"# contouring with contourLines() from grDevices fn_contourLines <- function() {   grDevices::contourLines(1:ncol(volcano), 1:nrow(volcano), volcano, levels = 10*(10:18)) }  # contouring with isolines() fn_isolines <- function() {   isolines(1:ncol(volcano), 1:nrow(volcano), volcano, 10*(10:18)) }  # contouring with isobands() fn_isobands <- function() {   isobands(1:ncol(volcano), 1:nrow(volcano), volcano, 10*(9:17), 10*(10:18)) }  microbenchmark::microbenchmark(fn_contourLines(), fn_isolines(), fn_isobands()) #> Unit: milliseconds #>               expr    min      lq     mean  median      uq     max neval #>  fn_contourLines() 1.5556 1.58715 2.047953 1.61290 2.60835  7.6248   100 #>      fn_isolines() 1.2293 1.27815 1.334637 1.29495 1.32805  4.3996   100 #>      fn_isobands() 3.1097 3.15860 3.391101 3.18945 3.23215 20.5885   100"},{"path":"/articles/isoband2.html","id":"invalid-geometries","dir":"Articles","previous_headings":"","what":"Invalid geometries","title":"Simple features","text":"converting isolines isobands simple features, can end geometries considered invalid. generally cases isobands portions zero width height, example set values single row column exactly equal lower boundary isoband. (lower boundary isoband included band, upper boundary excluded.) example, consider following elevation matrix, yields one isoband zero width one zero height.  isobands correct, conversion simple features yields invalid geometries. Invalid geometries can cause problems applications, even though usually can plotted geom_sf().  can repair invalid geometries using st_make_valid(): resulting plot unchanged. (always case; sometimes single lines two polygons eliminated st_make_valid().) Alternatively, can avoid invalid geometries can guarantee elevation value ever exactly equal isoband boundary. example, shift data values tiny amount (, 1e-10) don’t coincide band limits, invalid geometries generated. resulting plot looks visually unchanged.","code":"m <- matrix(   c(1.5, 1.5, 1.5, 1.5, 0.6, 0,     0.5, 1.5, 1.5,   0,   0, 0,       0,   1,   0,   1,   1, 0,       0,   1,   0, 0.7,   0, 0,     0.9, 1.3, 1.8, 1.4, 0.4, 0   ),   nrow = 5, ncol = 6, byrow = TRUE )  plot_iso(m, 1, 2) b <- isobands(x = 1:6, y = 5:1, z = m, levels_low = 0:1, levels_high = 1:2) bands <- iso_to_sfg(b)  iso <- st_sf(   id = factor(1:length(bands)),   geometry = st_sfc(bands) )  st_is_valid(iso, reason = TRUE) #> [1] \"Too few points in geometry component[5 3]\" #> [2] \"Too few points in geometry component[5 3]\" ggplot(iso, aes(fill = id)) +    geom_sf() +   theme(legend.position = \"bottom\") if (sf_extSoftVersion()[\"GEOS\"] >= \"3.8.0\") { # requires GEOS >= 3.8.0   iso_valid <- st_make_valid(iso)   st_is_valid(iso_valid, reason=TRUE) } if (sf_extSoftVersion()[\"GEOS\"] >= \"3.8.0\") { # requires GEOS >= 3.8.0   ggplot(iso_valid, aes(fill = id)) +     geom_sf() +     theme(legend.position = \"bottom\") } b <- isobands(x = 1:6, y = 5:1, z = m + 1e-10, levels_low = 0:1, levels_high = 1:2) bands <- iso_to_sfg(b) iso <- st_sf(id = factor(1:length(bands)), geometry = st_sfc(bands)) st_is_valid(iso, reason = TRUE) #> [1] \"Valid Geometry\" \"Valid Geometry\"  ggplot(iso, aes(fill = id)) +   geom_sf() +   theme(legend.position = \"bottom\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. Claus O. Wilke. Author.            Original author Thomas Lin Pedersen. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H, Wilke C, Pedersen T (2022). isoband: Generate Isolines Isobands Regularly Spaced Elevation Grids. R package version 0.2.7.9000, https://isoband.r-lib.org.","code":"@Manual{,   title = {isoband: Generate Isolines and Isobands from Regularly Spaced Elevation Grids},   author = {Hadley Wickham and Claus O. Wilke and Thomas Lin Pedersen},   year = {2022},   note = {R package version 0.2.7.9000},   url = {https://isoband.r-lib.org}, }"},{"path":"/index.html","id":"isoband-","dir":"","previous_headings":"","what":"Generate Isolines and Isobands from Regularly Spaced Elevation\n    Grids","title":"Generate Isolines and Isobands from Regularly Spaced Elevation\n    Grids","text":"Generate contour lines (isolines) contour polygons (isobands) regularly spaced grids containing elevation data. Package originally written Claus Wilke donated r-lib 2022.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Isolines and Isobands from Regularly Spaced Elevation\n    Grids","text":"Install latest official release CRAN via: Install current development github via:","code":"install.packages(\"isoband\") # install.packages(\"pak\") pak::pak(\"r-lib/isoband\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Generate Isolines and Isobands from Regularly Spaced Elevation\n    Grids","text":"two main workhorses package functions isolines() isobands(), respectively. return list isolines/isobands isolevel specified. isoline/isoband consists vectors x y coordinates, well vector ids specifying sets coordinates connected. format can handed directly grid.polyline()/grid.path() drawing. However, can also convert output spatial features draw ggplot2 (see ). function plot_iso() convenience function debugging testing.  isolining isobanding algorithms problem larger datasets. Let’s calculate isolines isobands volcano dataset, convert sf, plot ggplot2.","code":"library(isoband)  m <- matrix(c(0, 0, 0, 0, 0,               0, 1, 2, 1, 0,               0, 1, 2, 0, 0,               0, 1, 0, 1, 0,               0, 0, 0, 0, 0), 5, 5, byrow = TRUE)  isolines(1:ncol(m), 1:nrow(m), m, 0.5) #> $`0.5` #> $`0.5`$x #>  [1] 4.00 3.50 3.00 2.50 2.00 1.50 1.50 1.50 2.00 3.00 4.00 4.50 4.00 3.75 4.00 #> [16] 4.50 4.00 #>  #> $`0.5`$y #>  [1] 4.50 4.00 3.75 4.00 4.50 4.00 3.00 2.00 1.50 1.25 1.50 2.00 2.50 3.00 3.50 #> [16] 4.00 4.50 #>  #> $`0.5`$id #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  #>  #> attr(,\"class\") #> [1] \"isolines\" \"iso\"  isobands(1:ncol(m), 1:nrow(m), m, 0.5, 1.5) #> $`0.5:1.5` #> $`0.5:1.5`$x #>  [1] 2.50 2.00 1.50 1.50 1.50 2.00 3.00 4.00 4.50 4.00 3.75 4.00 4.50 4.00 3.50 #> [16] 3.00 3.00 3.25 3.50 3.00 2.50 2.50 #>  #> $`0.5:1.5`$y #>  [1] 4.00 4.50 4.00 3.00 2.00 1.50 1.25 1.50 2.00 2.50 3.00 3.50 4.00 4.50 4.00 #> [16] 3.75 3.25 3.00 2.00 1.75 2.00 3.00 #>  #> $`0.5:1.5`$id #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 #>  #>  #> attr(,\"class\") #> [1] \"isobands\" \"iso\" plot_iso(m, 0.5, 1.5) library(ggplot2) suppressWarnings(library(sf)) #> Linking to GEOS 3.10.2, GDAL 3.4.2, PROJ 8.2.1; sf_use_s2() is TRUE  m <- volcano b <- isobands((1:ncol(m))/(ncol(m)+1), (nrow(m):1)/(nrow(m)+1), m, 10*(9:19), 10*(10:20)) l <- isolines((1:ncol(m))/(ncol(m)+1), (nrow(m):1)/(nrow(m)+1), m, 10*(10:19))  bands <- iso_to_sfg(b) data_bands <- st_sf(   level = 1:length(bands),   geometry = st_sfc(bands) ) lines <- iso_to_sfg(l) data_lines <- st_sf(   level = 2:(length(lines)+1),   geometry = st_sfc(lines) )  ggplot() +   geom_sf(data = data_bands, aes(fill = level), color = NA, alpha = 0.7) +   geom_sf(data = data_lines, color = \"black\") +   scale_fill_viridis_c(guide = \"none\") +   coord_sf(expand = FALSE)"},{"path":"/reference/angle_halfcircle_bottom.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize label angles — angle_halfcircle_bottom","title":"Standardize label angles — angle_halfcircle_bottom","text":"Function factories return functions standardize rotation angles specific angle ranges.","code":""},{"path":"/reference/angle_halfcircle_bottom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize label angles — angle_halfcircle_bottom","text":"","code":"angle_halfcircle_bottom()  angle_halfcircle_right()  angle_fixed(theta = 0)  angle_identity()"},{"path":"/reference/angle_halfcircle_bottom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize label angles — angle_halfcircle_bottom","text":"theta Fixed angle, radians.","code":""},{"path":"/reference/angle_halfcircle_bottom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize label angles — angle_halfcircle_bottom","text":"angle_halfcircle_bottom() standardizes angles (-pi/2, pi/2]. angle_halfcircle_right() standardizes angles (0, pi]. angle_fixed() sets angles fixed value (0 default). angle_identity() modify angles.","code":""},{"path":"/reference/clip_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip lines so they don't run into a set of boxes. — clip_lines","title":"Clip lines so they don't run into a set of boxes. — clip_lines","text":"Clip lines run set boxes. Useful labeling isolines, allows removal line segments run text labels.","code":""},{"path":"/reference/clip_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip lines so they don't run into a set of boxes. — clip_lines","text":"","code":"clip_lines(x, y, id, clip_boxes, asp = 1)"},{"path":"/reference/clip_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip lines so they don't run into a set of boxes. — clip_lines","text":"x Numeric vector x coordinates y Numeric vector y coordinates id Integer vector id numbers indicating lines connected clip_boxes Data frame specifying locations boxes clip . five columns, named x, y, width, height, theta, specify x y positions box midpoint, well box width, box height, box angle radians. box specified one data row. asp Aspect ratio (width/height) target canvas. used convert widths heights vice versa rotated boxes","code":""},{"path":"/reference/iso_to_sfg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert isolines or isobands to sfg object — iso_to_sfg","title":"Convert isolines or isobands to sfg object — iso_to_sfg","text":"Convert isolines isobands sf geometry collection (sfg) object. downstream processing needs happen via sf package.","code":""},{"path":"/reference/iso_to_sfg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert isolines or isobands to sfg object — iso_to_sfg","text":"","code":"iso_to_sfg(x)"},{"path":"/reference/iso_to_sfg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert isolines or isobands to sfg object — iso_to_sfg","text":"x object convert.","code":""},{"path":"/reference/iso_to_sfg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert isolines or isobands to sfg object — iso_to_sfg","text":"function iso_to_sfg() generic takes object created either isolines() isobands() turns simple features (sf) geometry collection. Importantly, isobanding algorithm can produce polygons represent valid simple features. happens usually lower limit isoband exactly equal data values (see examples demonstration). can worked around either slightly shifting data band limits (e.g., round data values shift value smaller rounding error) fixing geometries using function st_make_valid().","code":""},{"path":"/reference/iso_to_sfg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert isolines or isobands to sfg object — iso_to_sfg","text":"","code":"if (requireNamespace(\"sf\", quietly = TRUE)) { library(sf) library(ggplot2)  # Example 1: simple 5x5 matrix m <- matrix(c(0, 2, 2, 2, 0,               0, 1, 0, 1, 0,               0, 1, 0, 0, 0,               0, 1, 0, 1, 0,               0, 0, 0, 0, 0), 5, 5, byrow = TRUE)  z <- isolines(1:ncol(m), nrow(m):1, m, c(0.5, 1.5)) lines <- iso_to_sfg(z) x <- st_sf(level = names(lines), geometry = st_sfc(lines)) ggplot(x) + geom_sf(aes(color = level))  # Example 2: volcano dataset m <- volcano b <- isobands((1:ncol(m))/(ncol(m)+1), (nrow(m):1)/(nrow(m)+1), m,               10*9:19, 10*10:20) bands <- iso_to_sfg(b) x <- st_sf(level = as.numeric(sub(\":.*\", \"\", names(bands))), geometry = st_sfc(bands)) ggplot(x) + geom_sf(aes(color = level, fill = level))  # Example 3: invalid simple features m <- matrix(c(1.5, 1.5, 1.5, 1.5, 0.6,               0.5, 1.5, 1.5,   0,   0,                 0,   1,   0,   1,   1,                 0,   1,   0, 0.7,   0,               0.9, 1.3, 1.8, 1.4, 0.4), 5, 5, byrow = TRUE)  raw <- isobands(1:5, 5:1, m, levels_low = 0:1, levels_high = 1:2) bands <- iso_to_sfg(raw)  iso <- st_sf(   id = factor(1:length(bands)),   geometry = st_sfc(bands) )  # the geometries are not valid st_is_valid(iso, reason = TRUE) # this doesn't prevent us from plotting them ggplot(iso, aes(fill = id)) + geom_sf()  # make all geometries valid, requires GEOS >= 3.8.0 if (sf_extSoftVersion()[\"GEOS\"] >= \"3.8.0\") {   iso2 <- st_make_valid(iso)   st_is_valid(iso2, reason=TRUE)   # the plot should be unchanged   ggplot(iso2, aes(fill = id)) + geom_sf() }  # alternatively, if we shift all data values by a tiny # amount (here, 1e-10) so they don't coincide with the band # limits, no invalid geometries are generated. raw <- isobands(1:5, 5:1, m + 1e-10, levels_low = 0:1, levels_high = 1:2) bands <- iso_to_sfg(raw) iso <- st_sf(id = factor(1:length(bands)), geometry = st_sfc(bands)) st_is_valid(iso, reason = TRUE) } #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE #> [1] \"Valid Geometry\" \"Valid Geometry\""},{"path":"/reference/isoband-package.html","id":null,"dir":"Reference","previous_headings":"","what":"isoband: Generate Isolines and Isobands from Regularly Spaced Elevation Grids — isoband-package","title":"isoband: Generate Isolines and Isobands from Regularly Spaced Elevation Grids — isoband-package","text":"fast C++ implementation generate contour lines (isolines) contour polygons (isobands) regularly spaced grids containing elevation data.","code":""},{"path":[]},{"path":"/reference/isoband-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"isoband: Generate Isolines and Isobands from Regularly Spaced Elevation Grids — isoband-package","text":"Maintainer: Hadley Wickham hadley@posit.co (ORCID) Authors: Claus O. Wilke wilke@austin.utexas.edu (ORCID) (Original author) Thomas Lin Pedersen thomasp85@gmail.com (ORCID)","code":""},{"path":"/reference/isobands.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient calculation of isolines and isobands from elevation grid — isobands","title":"Efficient calculation of isolines and isobands from elevation grid — isobands","text":"Efficient calculation isolines isobands elevation grid","code":""},{"path":"/reference/isobands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient calculation of isolines and isobands from elevation grid — isobands","text":"","code":"isobands(x, y, z, levels_low, levels_high)  isolines(x, y, z, levels)"},{"path":"/reference/isobands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient calculation of isolines and isobands from elevation grid — isobands","text":"x Numeric vector specifying x locations grid points. y Numeric vector specifying y locations grid points. z Numeric matrix specifying elevation values grid point. levels_low, levels_high Numeric vectors minimum/maximum z values isobands generated. z values exactly equal value levels_low considered part corresponding isoband, z values exactly equal value levels_high considered part corresponding isoband. words, intervals specifying isobands closed lower boundary open upper boundary. levels Numeric vector z values isolines generated.","code":""},{"path":[]},{"path":"/reference/isobands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficient calculation of isolines and isobands from elevation grid — isobands","text":"","code":"library(grid)  #' # one simple connected shape m <- matrix(c(0, 0, 0, 0, 0, 0,               0, 0, 0, 1, 1, 0,               0, 0, 1, 1, 1, 0,               0, 1, 1, 0, 0, 0,               0, 0, 0, 1, 0, 0,               0, 0, 0, 0, 0, 0), 6, 6, byrow = TRUE)  df_bands <- isobands((1:ncol(m))/(ncol(m)+1), (nrow(m):1)/(nrow(m)+1), m, 0.5, 1.5)[[1]] df_lines <- isolines((1:ncol(m))/(ncol(m)+1), (nrow(m):1)/(nrow(m)+1), m, 0.5)[[1]] g <- expand.grid(x = (1:ncol(m))/(ncol(m)+1), y = (nrow(m):1)/(nrow(m)+1)) grid.newpage() grid.points(g$x, g$y, default.units = \"npc\", pch = 19, size = unit(0.5, \"char\")) grid.path(df_bands$x, df_bands$y, df_bands$id, gp = gpar(fill = \"cornsilk\", col = NA)) grid.polyline(df_lines$x, df_lines$y, df_lines$id)   # a similar plot can be generated with the plot_iso() function, # which is useful for exploring how the algorithm works plot_iso(m, 0.5, 1.5)   # NAs are ignored m <- matrix(c(NA, NA, NA, 0, 0, 0,               NA, NA, NA, 1, 1, 0,                0,  0,  1, 1, 1, 0,                0,  1,  1, 0, 0, 0,                0,  0,  0, 1, 0, 0,                0,  0,  0, 0, 0, 0), 6, 6, byrow = TRUE) plot_iso(m, 0.5, 1.5)   # two separate shapes m <- matrix(c(0, 0, 1, 1,               0, 1, 1, 1,               1, 1, 0, 0,               0, 0, 0.8, 0), 4, 4, byrow = TRUE) plot_iso(m, 0.5, 1.5)   # shape with hole m <- matrix(c(0, 0, 0, 0, 0, 0,               0, 1, 1, 1, 1, 0,               0, 1, 2, 2, 1, 0,               0, 1, 2, 2, 1, 0,               0, 1, 1, 1, 1, 0,               0, 0, 0, 0, 0, 0), 6, 6, byrow = TRUE) plot_iso(m, 0.5, 1.5)"},{"path":"/reference/isobands_grob.html","id":null,"dir":"Reference","previous_headings":"","what":"Render isobands — isobands_grob","title":"Render isobands — isobands_grob","text":"function generates grid grob represents isobands.","code":""},{"path":"/reference/isobands_grob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render isobands — isobands_grob","text":"","code":"isobands_grob(bands, gp = gpar(), units = \"npc\")"},{"path":"/reference/isobands_grob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render isobands — isobands_grob","text":"bands Isobands, produced isobands() function. gp Grid graphical parameters. Parameters recycled among total number bands drawn. units character string specifying units interpret isobands coordinates. Defaults \"npc\".","code":""},{"path":[]},{"path":"/reference/isobands_grob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render isobands — isobands_grob","text":"","code":"library(grid)  viridis_pal <- colorRampPalette(   c(\"#440154\", \"#414487\", \"#2A788E\", \"#22A884\", \"#7AD151\", \"#FDE725\"),   space = \"Lab\" )  x <- (1:ncol(volcano))/(ncol(volcano)+1) y <- (nrow(volcano):1)/(nrow(volcano)+1) bands <- isobands(x, y, volcano, 5*(18:38), 5*(19:39))  b <- isobands_grob(   bands,   gp = gpar(col = \"black\", fill = viridis_pal(21), alpha = 0.5) )  grid.newpage() grid.draw(b)"},{"path":"/reference/isolines_grob.html","id":null,"dir":"Reference","previous_headings":"","what":"Render labeled isolines — isolines_grob","title":"Render labeled isolines — isolines_grob","text":"function generates grid grob represents labeled isolines.","code":""},{"path":"/reference/isolines_grob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render labeled isolines — isolines_grob","text":"","code":"isolines_grob(   lines,   gp = gpar(),   breaks = NULL,   labels = NULL,   margin = unit(c(1, 1, 1, 1), \"pt\"),   label_col = NULL,   label_alpha = NULL,   label_placer = label_placer_minmax(),   units = \"npc\" )"},{"path":"/reference/isolines_grob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render labeled isolines — isolines_grob","text":"lines Isolines, produced isolines() function. gp Grid graphical parameters. Parameters applying lines (col, lwd, lty, etc.) recycled among total number lines drawn. Parameters applying labels (fontfamily, fontsize) recycled among specified breaks . two parameters col alpha also applied labels, unless overridden (see label_col label_alpha), matched corresponding lines. breaks Character vector specifying isolines labeled. NULL, labels isolines. labels Character vector specifying labels break. NULL, uses breaks labels. number labels provided must match number breaks provided. margin Unit object length 4 specifying top, right, bottom, left margins around text label. margins applied labels. label_col Color applied labels. Can used override color provided gp, case labels lines different colors. label_alpha Alpha applied labels. Can used override alpha value provided gp, case labels lines different alpha values. label_placer Function controls labels placed along isolines. Uses label_placer_minmax() default. units character string specifying units interpret isolines coordinates. Defaults \"npc\".","code":""},{"path":[]},{"path":"/reference/isolines_grob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render labeled isolines — isolines_grob","text":"","code":"library(grid)  viridis_pal <- colorRampPalette(   c(\"#440154\", \"#414487\", \"#2A788E\", \"#22A884\", \"#7AD151\", \"#FDE725\"),   space = \"Lab\" )  x <- (1:ncol(volcano))/(ncol(volcano)+1) y <- (nrow(volcano):1)/(nrow(volcano)+1) lines <- isolines(x, y, volcano, 5*(19:38)) bands <- isobands(x, y, volcano, 5*(18:38), 5*(19:39))  b <- isobands_grob(   bands,   gp = gpar(col = NA, fill = viridis_pal(21), alpha = 0.4) ) l <- isolines_grob(   lines, breaks = 20*(5:10),   gp = gpar(     lwd = c(.3, 1, .3, .3)   ) )  grid.newpage() grid.draw(b) grid.draw(l)"},{"path":"/reference/label_placer.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up a label placement strategy — label_placer_minmax","title":"Set up a label placement strategy — label_placer_minmax","text":"functions set various label placement strategies.","code":""},{"path":"/reference/label_placer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up a label placement strategy — label_placer_minmax","text":"","code":"label_placer_minmax(   placement = \"tb\",   rot_adjuster = angle_halfcircle_bottom(),   n = 2 )  label_placer_none()  label_placer_manual(breaks, x, y, theta)  label_placer_middle(rot_adjuster = angle_halfcircle_bottom())"},{"path":"/reference/label_placer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up a label placement strategy — label_placer_minmax","text":"placement String consisting combination letters \"t\", \"r\", \"b\", \"l\" indicating placement labels top, right, bottom, left isoline. rot_adjuster Function standardizes rotation angles labels. See e.g. angle_halfcircle_bottom(). n Size point neighborhood rotation angle calculated. breaks Character vector specifying isolines labeled, isolines_grob(). x, y, theta Numeric vectors specifying x y positions angles (radians) label corresponding break.","code":""},{"path":"/reference/label_placer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up a label placement strategy — label_placer_minmax","text":"label_placer_minmax() places labels horizontal vertical minima maxima respective isolines. label_placer_none() places labels . label_placer_manual() places labels manually defined locations. label_placer_middle() places labels middle isoline.","code":""},{"path":"/reference/label_placer_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic label placement function — label_placer_simple","title":"Generic label placement function — label_placer_simple","text":"simple label placer processes separate isolines independently places labels line using placer function actual placement work. label placer meant used end users, rather facilitates development new label placers, label_placer_minmax().","code":""},{"path":"/reference/label_placer_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic label placement function — label_placer_simple","text":"","code":"label_placer_simple(lines, labels_data, placer_fun)"},{"path":"/reference/label_placer_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic label placement function — label_placer_simple","text":"lines Isolines object labels placed. labels_data data frame containing information labels placed. placer_fun function takes individual isoline plus associated break id input returns data frame specifying label positions. data frame three columns called x, y, theta. x y specify label position, theta specifies label angle radians. data frame can multiple rows, results label placed multiple locations.","code":""},{"path":"/reference/plot_iso.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize a single isoband — plot_iso","title":"Visualize a single isoband — plot_iso","text":"function visualizes single isoband calculated matrix. mainly useful debugging visualizing isobanding algorithm. See isobands() examples.","code":""},{"path":"/reference/plot_iso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize a single isoband — plot_iso","text":"","code":"plot_iso(   m,   vlo,   vhi,   fill_lo = \"gray95\",   fill_mid = \"gray50\",   fill_hi = \"black\",   fill_band = \"cornsilk\",   col_lo = \"black\",   col_hi = \"black\",   newpage = TRUE )"},{"path":"/reference/plot_iso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize a single isoband — plot_iso","text":"m input matrix vlo lower cutoff isobanding vhi higher cutoff isobanding fill_lo fill color points lower cutoff fill_mid fill color points two cutoffs fill_hi fill color points higher cutoff fill_band fill color isoband col_lo line color lower cutoff col_hi line color higher cutoff newpage boolean, indicating whether grid.newpage() called ","code":""},{"path":"/reference/plot_iso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize a single isoband — plot_iso","text":"","code":"m <- matrix(c(0, 0, 0, 0, 0, 0,               0, 2, 2, 2, 2, 0,               0, 2, 0, 0, 2, 0,               0, 2, 0, 0, 2, 0,               0, 2, 2, 2, 2, 0,               0, 0, 0, 0, 0, 0), 6, 6, byrow = TRUE)  plot_iso(m, 0.5, 1.5)"},{"path":[]},{"path":"/news/index.html","id":"isoband-027","dir":"Changelog","previous_headings":"","what":"isoband 0.2.7","title":"isoband 0.2.7","text":"CRAN release: 2022-12-20 Remove compile-time dependency testthat. Changed maintainer original author (Claus Wilke) donated codebase r-lib.","code":""},{"path":"/news/index.html","id":"isoband-0-2-7","dir":"Changelog","previous_headings":"","what":"isoband 0.2.6","title":"isoband 0.2.7","text":"Update latest testthat headers compatibility LLVM clang 15.0.0. Correct label angle current aspect ratio isolines_grob() (#28, @eliocamp).","code":""},{"path":"/news/index.html","id":"isoband-0-2-7-1","dir":"Changelog","previous_headings":"","what":"isoband 0.2.5","title":"isoband 0.2.7","text":"Add new label placer function label_placer_middle() (#24, @jamarav). vendored testthat/catch code now uses constant value stack size rather relying SIGSTKSZ. See: https://github.com/r-lib/testthat/issues/1373","code":""},{"path":"/news/index.html","id":"isoband-0-2-7-2","dir":"Changelog","previous_headings":"","what":"isoband 0.2.4","title":"isoband 0.2.7","text":"Remove testthat compile-time dependency.","code":""},{"path":"/news/index.html","id":"isoband-0-2-7-3","dir":"Changelog","previous_headings":"","what":"isoband 0.2.3","title":"isoband 0.2.7","text":"Fix build testthat 3.0.","code":""},{"path":"/news/index.html","id":"isoband-0-2-7-4","dir":"Changelog","previous_headings":"","what":"isoband 0.2.2","title":"isoband 0.2.7","text":"Remove Rcpp dependency (#11, @thomasp85).","code":""},{"path":"/news/index.html","id":"isoband-0-2-7-5","dir":"Changelog","previous_headings":"","what":"isoband 0.2.1","title":"isoband 0.2.7","text":"Improved clipping algorithm clip_lines(), less likely experience numerical instabilities.","code":""},{"path":"/news/index.html","id":"isoband-0-2-7-6","dir":"Changelog","previous_headings":"","what":"isoband 0.2.0","title":"isoband 0.2.7","text":"Added isolines_grob() drawing labeled isolines via grid graphics system. companion function isobands_grob() provided convenience. Numerous minor fixes improvements.","code":""},{"path":"/news/index.html","id":"isoband-0-2-7-7","dir":"Changelog","previous_headings":"","what":"isoband 0.1.0","title":"isoband 0.2.7","text":"First public release.","code":""}]
